import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# ========================== FUNCTIONS ===========================

def light_intensity(P, I_in, k, Kbg, z):
    """Computes the light intensity at each depth considering phytoplankton absorption."""
    integral_term = np.cumsum(P) * dz
    I = I_in * np.exp(-k * integral_term - Kbg * z)
    return I

def growth_N(N, HN):
    """Nutrient limitation function."""
    return  N / (HN + N)

def growth_L(beta, I, umax):
    """Light limitation function."""
    return (beta * I) / np.sqrt(umax**2 + beta**2 * I**2)

# ========================== PARAMETERS ===========================

I_in = 200  # Incident light intensity (umol photons / m^2 s)
Kbg = 0.045  # Background turbidity (m-1)
k = 6e-10  # Absorption coefficient of phytoplankton (m^2/cell)
umax = 0.5  # Maximum specific growth rate (d-1)
alpha = 1e-9 # Nutrient content of phytoplankton (mmol N/cell)
beta = 0.1 # Slope of PI curve (m^2 W^-1 d^-1)
HN = 0.3  # Half-saturation constant for nutrient-limited growth (mmol nutrient / m^3)
HI = 20  # Half-saturation constant for light-limited growth (umol photons / m^2 s)
epsilon = 0.05  # Recycling coefficient (d-1)
gamma = 0.5 # Zooplankton grazing (m^3 (mmol N)-1 d-1)
tau = 0.1 # Remineralization (d-1)
Av = 5 # Turbulent diffusivity coefficient (m2/d)
v = 5 # Sinking velocity of detritus (m /d)
NB = 30 # Nutrient bottom concentration (mmol N m-3)
L0 = 200  # Mean incident light intensity (umol photons / m^2 s)
L_amplitude = 1  # Seasonal variation amplitude ()
zm = 300  # Depth of the water column (m)

# ========================== GRID SETUP ===========================

dz = 1  # Increased grid spacing (m)
n = int(zm / dz)  # Grid length
z = np.linspace(0, zm, n)  # Depth array (m)
t = np.linspace(0, 100, 100)  # Time array (days)

# ========================== INITIAL CONDITIONS ===========================

P0 = np.ones_like(z) * 0.1  # Initial phytoplankton concentration (mmol N/m^3)
N0 = NB * (z / zm)  # Initial nutrient concentration (mmol N/m^3)
D0 = np.zeros_like(z)  # Initial detritus concentration (mmol N/m^3)

# ========================== MODEL FUNCTION ===========================

def model(y, t, z, dz, I_in, Kbg, k, umax, beta, HN, epsilon, gamma, tau, Av, v, NH):
    P = y[:n]
    N = y[n:2*n]
    D = y[2*n:]
   
    I = light_intensity(P, I_in, k, Kbg, z)
    sigma_N = growth_N(N, HN)
    sigma_L = growth_L(beta, I, umax)
   
    J_D = np.zeros(n+1)
    J_P = np.zeros(n+1)
    J_N = np.zeros(n+1)
   
    # Compute fluxes (excluding the boundaries)
    for i in range(1, n):
        J_P[i] = -Av * (P[i] - P[i-1]) / dz
        J_N[i] = -Av * (N[i] - N[i-1]) / dz
        J_D[i] = -v * D[i] - Av * (D[i] - D[i-1]) / dz

    # Boundary conditions
    J_P[0] = J_P[-1] = 0
    J_N[0] = 0
    J_N[-1] = Av * (N[-1] - NB) / dz
    J_D[0] = 0
    J_D[-1] = v * -D[-1]  

    # Differential equations 
    dPdt = umax * sigma_L * sigma_N * P - epsilon * P - gamma * P**2 - (J_P[1:]-J_P[0:-1])/dz
    dNdt = - umax * sigma_L * sigma_N * P + tau * D - (J_N[1:]-J_N[0:-1])/dz
    dDdt = epsilon * P - tau * D - (J_D[1:]-J_D[0:-1])/dz
   
    return np.concatenate([dPdt, dNdt, dDdt])


# ========================== SOLVE ODEs ===========================

args = (z, dz, I_in, Kbg, k, umax, beta, HN, epsilon, gamma, tau, Av, v, NB)
y0 = np.concatenate([P0, N0, D0])  
sol = odeint(model, y0, t, args=args)

P_final = sol[-1, :n]
N_final = sol[-1, n:2*n]
D_final = sol[-1, 2*n:]
I_final = light_intensity(P_final, I_in, k, Kbg, z)



# ========================== DEMONSTRATE SOLUTION IS CONVERGED ===========================

plt.figure(figsize=(8, 10))

plt.subplots_adjust(hspace=0.4)

# Plot Nutrients
ax = plt.subplot(3, 1, 1)
ax.set_title('Nutrients')
plt.pcolormesh(t, z, sol[:, n:2*n].T, shading='auto')
plt.ylabel('Depth (m)')
plt.colorbar(label='mmol N m$^{-3}$')
plt.gca().invert_yaxis()


# Plot Phytoplankton
ax = plt.subplot(3, 1, 2)
ax.set_title('Phytoplankton')
plt.pcolormesh(t, z, sol[:, :n].T, shading='auto', vmin=0, vmax=0.2)
plt.ylabel('Depth (m)')
plt.colorbar(label='mmol N m$^{-3}$')
plt.gca().invert_yaxis()


# Plot Detritus
ax = plt.subplot(3, 1, 3)
ax.set_title('Detritus')
plt.pcolormesh(t, z, sol[:, 2*n:3*n].T, shading='auto', vmin=0, vmax=0.1)
plt.ylabel('Depth (m)')
plt.colorbar(label='mmol N m$^{-3}$')
plt.xlabel('Time (days)')
plt.gca().invert_yaxis()


plt.show()

# ========================== DEMONSTRATE INDEPENDENCE OF GRID SIZE ===========================

# Define different dz values
dz_values = [1, 0.75, 0.5, 0.25]

# Create subplots with a horizontal layout
fig, axes = plt.subplots(1, len(dz_values), figsize=(15, 6), sharey=True)

for i, dz in enumerate(dz_values):
    # Recalculate grid and initial conditions for each dz
    n = int(zm / dz)
    z = np.linspace(0, zm, n)
    t = np.linspace(0, 1000, 1000)
    P0 = np.ones_like(z) * 0.1
    N0 = NB * (z / zm)
    D0 = np.zeros_like(z)
    y0 = np.concatenate([P0, N0, D0]) 

    # Solve ODEs
    args = (z, dz, I_in, Kbg, k, umax, beta, HN, epsilon, gamma, tau, Av, v, NB)
    sol = odeint(model, y0, t, args=args)

    # Extract phytoplankton data
    P_last = sol[-1, :n] 

    # Plot surface concentration over time
    ax = axes[i]
    im = ax.imshow(sol.T[:n, :], aspect='auto', extent=[t[0], t[-1], 0, zm], vmin=0, vmax=0.1, origin='lower')


    ax.plot(P_last, z, label=f'dz = {dz} m', color='red', linestyle='--')

    # Titles and labels
    ax.set_title(f'dz = {dz} m')
    ax.set_xlabel('Time (days)')
    if i == 0:
        ax.set_ylabel('Depth (m)')

    # Set the y-axis limits and ticks, then invert the y-axis
    ax.set_ylim(0, zm)  # Set the limits of y-axis
    ax.set_yticks(np.linspace(0, zm, 6))  # Set the ticks from 0 to 300
    ax.set_yticklabels(np.round(np.linspace(0, zm, 6), 1))  # Adjust the tick labels

    ax.invert_yaxis()

# Adjust layout to make space for the colorbar manually
fig.subplots_adjust(right=0.85)

# Add a separate axis for the colorbar on the far right side
cbar_ax = fig.add_axes([0.88, 0.15, 0.02, 0.7])  # [left, bottom, width, height]
fig.colorbar(im, cax=cbar_ax, label='Phytoplankton Concentration (mmol N m$^{-3}$)')

# Show the final plot
plt.show()

# ========================== STEADY STATE DEPTH PROFILES ===========================
# Reset dz to 1
dz = 1
n = int(zm / dz)  # Grid length
z = np.linspace(0, zm, n)  # Recalculate depth array based on dz

fig, axes = plt.subplots(1, 4, figsize=(16, 6), sharey=True)  
fig.subplots_adjust(wspace=0.1)  # Increase spacing between subplots

# Plot Detritus
axes[3].plot(D_final, z, color='brown')
axes[3].set_xlabel('mmol N $m^{-3}$')
axes[3].set_xlim(-0.01, 0.1)
axes[3].set_title('Detritus')
axes[3].invert_yaxis()

# Plot Phytoplankton
axes[2].plot(P_final, z)
axes[2].set_xlabel('mmol N $m^{-3}$')
axes[2].set_title('Phytoplankton')

# Plot Nutrient
axes[1].plot(N_final, z, color='green')
axes[1].set_xlabel('mmol N $m^{-3}$')
axes[1].set_title('Nutrient')

# Plot Light Intensity
axes[0].plot(I_final, z, color='orange')
axes[0].set_xlabel('umol photons m$^{-2}$ s$^{-1}$')
axes[0].set_title('Light Intensity')
axes[0].set_ylabel('Depth (m)')

plt.show()

# ========================== SENSITIVITY ANALYSIS ===========================

# TESTING NUTRIENT BOTTOM CONCENTRATION (NB)
# Define values of nutrient bottom concentration (NB) to test
NB_values = [30, 60, 120, 240]

plt.figure(figsize=(8, 6))

# Loop through different NH values
for NB_test in NB_values:
    
    # Update initial nutrient concentration with new NB_test
    N0 = NB_test * (z / zm)  # Reset nutrient profile for each NB
    D0 = np.zeros_like(z)    # Reset detritus
    P0 = np.ones_like(z) * 0.1  # Reset phytoplankton
    
    y0 = np.concatenate([P0, N0, D0])  # Updated initial conditions

    # Update args
    args = (z, dz, I_in, Kbg, k, umax, beta, HN, epsilon, gamma, tau, Av, v, NB_test)  
    
    # Solve ODE
    sol = odeint(model, y0, t, args)
    
    # Extract phytoplankton at the last time step
    P_last = sol[-1, :n]  
    
    # Plot
    plt.plot(P_last, z, label=f'NB = {NB_test} mmol N m$^{-3}$')

# Adjust plot
plt.gca().invert_yaxis()
plt.xlabel('Phytoplankton Concentration (mmol N $m^{-3}$)')
plt.ylabel('Depth (m)')
plt.legend(title='Nutrient Bottom Concentrations')
plt.grid(False)
plt.tight_layout()
plt.show()


# TESTING MAXIMUM SPECIFIC GROWTH RATE (UMAX)

umax_values = [0.5, 1.0, 2.0, 4.0]  # Test different umax values

plt.figure(figsize=(8, 6))

# Loop through different umax values
for umax_test in umax_values:
    
    # Update initial nutrient concentration with new NB_test
    N0 = NB * (z / zm)  # Reset nutrient profile for each NB
    D0 = np.zeros_like(z)    # Reset detritus
    P0 = np.ones_like(z) * 0.1  # Reset phytoplankton
    
    y0 = np.concatenate([P0, N0, D0])  # Updated initial conditions

    # Update args with new NH_test or umax_test
    args = (z, dz, I_in, Kbg, k, NB, beta, HN, epsilon, gamma, tau, Av, v, umax_test)  
    
    # Solve ODE
    sol = odeint(model, y0, t, args)
    
    # Extract phytoplankton at the last time step
    P_last = sol[-1, :n]  
    
    # Plot
    plt.plot(P_last, z, label=f'$\mu_{{max}}$ = {umax_test} d$^{{-1}}$')


# Adjust plot
plt.gca().invert_yaxis()
plt.xlabel('Phytoplankton Concentration (mmol N $m^{-3}$)')
plt.ylabel('Depth (m)')
plt.legend(title='Maximum Growth Rates')
plt.grid(False)
plt.tight_layout()
plt.show()

# ========================== SEASONALITY ===========================

# Reset parameters to avoid overwriting from other analysis 
I_in = 200  # Incident light intensity (umol photons / m^2 s)
Kbg = 0.045  # Background turbidity (m-1)
k = 6e-10  # Absorption coefficient of phytoplankton (m^2/cell)
umax = 0.5  # Maximum specific growth rate (d-1)
alpha = 1e-9 # Nutrient content of phytoplankton (mmol N/cell)
beta = 0.1 # Slope of PI curve (m^2 W^-1 d^-1)
HN = 0.3  # Half-saturation constant for nutrient-limited growth (mmol nutrient / m^3)
HI = 20  # Half-saturation constant for light-limited growth (umol photons / m^2 s)
epsilon = 0.05  # Recycling coefficient (d-1)
gamma = 0.5 # Zooplankton grazing (m^3 (mmol N)-1 d-1)
tau = 0.1 # Remineralization (d-1)
Av = 5 # Turbulent diffusivity coefficient (m2/d)
v = 5 # Sinking velocity of detritus (m /d)
NB = 30 # Nutrient bottom concentration (mmol N m-3)
L0 = 200  # Mean incident light intensity (umol photons / m^2 s)
L_amplitude = 1  # Seasonal variation amplitude ()
zm = 300  # Depth of the water column (m)
t = np.linspace(0, 1000, 1000)  # Time array (days)


# MODEL FUNCTION
def model_season(y, t, z, dz, L0, L_amplitude, Kbg, k, umax, beta, HN, epsilon, gamma, tau, Av, v, NB):
    P = y[:n]
    N = y[n:2*n]
    D = y[2*n:]
    
    # Implement seasonal light variation
    I_in = L0 * (1 + L_amplitude * np.sin((t / 365.0) * 2 * np.pi))
    I = light_intensity(P, I_in, k, Kbg, z)

    sigma_N = growth_N(N, HN)
    sigma_L = growth_L(beta, I, umax)

    J_D = np.zeros(n+1)
    J_P = np.zeros(n+1)
    J_N = np.zeros(n+1)
    
     # Compute fluxes (excluding the boundaries)
    for i in range(1, n):
         J_P[i] = -Av * (P[i] - P[i-1]) / dz
         J_N[i] = -Av * (N[i] - N[i-1]) / dz
         J_D[i] = -v * D[i] - Av * (D[i] - D[i-1]) / dz

     # Boundary conditions
    J_P[0] = J_P[-1] = 0
    J_N[0] = 0
    J_N[-1] = Av * (N[-1] - NB) / dz
    J_D[0] = 0
    J_D[-1] = v * -D[-1]  

     # Differential equations 
    dPdt = umax * sigma_L * sigma_N * P - epsilon * P - gamma * P**2 - (J_P[1:]-J_P[0:-1])/dz
    dNdt = - umax * sigma_L * sigma_N * P + tau * D - (J_N[1:]-J_N[0:-1])/dz
    dDdt = epsilon * P - tau * D - (J_D[1:]-J_D[0:-1])/dz
     
    return np.concatenate([dPdt, dNdt, dDdt])

# SOLVE ODE SYSTEM
args2 = (z, dz, L0, L_amplitude, Kbg, k, umax, beta, HN, epsilon, gamma, tau, Av, v, NB)
y0 = np.concatenate([P0, N0, D0])   
sol2 = odeint(model_season, y0, t, args=args2)

# Compute seasonal light intensity
L_surface = L0 * (1 + L_amplitude * np.sin((t / 365) * 2 * np.pi))

# Extract time evolution of P, N, and D
P_over_time = sol2[:, :n].mean(axis=1)  # Average over depth
N_over_time = sol2[:, n:2*n].mean(axis=1)  # Average over depth
D_over_time = sol2[:, 2*n:].mean(axis=1)  # Average over depth

# PLOT RESULTS
fig = plt.figure(figsize=(12, 8))

# Seasonal Light Intensity
plt.subplot(2, 2, 1)
plt.plot(t, L_surface, label="Surface Light Intensity", color='orange')
plt.xlabel("Time (days)", fontsize=12)
plt.ylabel("Light Intensity (umol photons m$^{-2}$ s$^{-1}$)", fontsize=12)
plt.title("Seasonal Variation of Surface Light", fontsize=14)
plt.axhline(L0, color='gray', linestyle='--', label="Mean Light Intensity")
plt.legend(fontsize=10)
plt.grid(True)

# Phytoplankton Concentration Over Time
plt.subplot(2, 2, 2)
plt.plot(t, P_over_time, label="Phytoplankton (P)")
plt.xlabel("Time (days)", fontsize=12)
plt.ylabel("Concentration (mmol N $m^{-3}$)", fontsize=12)
plt.title("Time Evolution of Phytoplankton", fontsize=14)
plt.legend(fontsize=10)
plt.grid(True)

# Nutrient Concentration Over Time
plt.subplot(2, 2, 3)
plt.plot(t, N_over_time, label="Nutrient (N)", color='green')
plt.xlabel("Time (days)", fontsize=12)
plt.ylabel("Concentration (mmol N $m^{-3}$)", fontsize=12)
plt.title("Time Evolution of Nutrients", fontsize=14)
plt.legend(fontsize=10)
plt.grid(True)

# Detritus Concentration Over Time
plt.subplot(2, 2, 4)
plt.plot(t, D_over_time, label="Detritus (D)", color='brown')
plt.xlabel("Time (days)", fontsize=12)
plt.ylabel("Concentration (mmol N $m^{-3}$)", fontsize=12)
plt.title("Time Evolution of Detritus", fontsize=14)
plt.legend(fontsize=10)
plt.grid(True)

# Adjust spacing for better readability
plt.subplots_adjust(hspace=0.4, wspace=0.3)
plt.show()
